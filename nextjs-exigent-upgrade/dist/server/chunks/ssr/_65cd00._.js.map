{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/sanity/client.ts"],"sourcesContent":["import { createClient } from \"next-sanity\";\nimport imageUrlBuilder from \"@sanity/image-url\";\n\ninterface Image {\n  image: string;\n}\n\nexport const client = createClient({\n  projectId: \"t79x65c2\",\n  dataset: \"production\",\n  apiVersion: \"2024-01-01\", // Make sure this matches your schema version\n  useCdn: false,\n});\n\nconst builder = imageUrlBuilder(client);\n\nexport function urlForImage(source: Image) {\n  return builder.image(source);\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAMO,MAAM,SAAS,CAAA,GAAA,8KAAA,CAAA,eAAY,AAAD,EAAE;IACjC,WAAW;IACX,SAAS;IACT,YAAY;IACZ,QAAQ;AACV;AAEA,MAAM,UAAU,CAAA,GAAA,gKAAA,CAAA,UAAe,AAAD,EAAE;AAEzB,SAAS,YAAY,MAAa;IACvC,OAAO,QAAQ,KAAK,CAAC;AACvB"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/team/[slug]/page.tsx"],"sourcesContent":["import React from 'react';\nimport { PortableText, type SanityDocument } from 'next-sanity';\nimport { client, urlForImage } from '../../sanity/client';\nimport Image from 'next/image';\nimport { Metadata } from 'next';\n\nconst PERSON_QUERY = `*[_type == \"person\" && slug.current == $slug][0] | {\n  _id, name, title, subtitle, description, image, slug, order,\n  content[] {\n    _type == \"imageGallery\" => {\n      images[] {\n        asset-> {\n          url\n        },\n        alt\n      },\n      caption\n    }\n  }\n}`;\n\nconst SLUGS_QUERY = `\n*[_type == \"person\"]{\n  \"slug\": slug.current\n}`;\n\n// Generate static paths for all available slugs\nexport async function generateStaticParams() {\n  const items = await client.fetch<{ slug: string }[]>(SLUGS_QUERY);\n\n  // Return the paths in the format required by Next.js\n  return items.map((item) => ({\n    slug: item.slug, // Matches the `[slug]` dynamic segment\n  }));\n}\n\n// Fetch the data for the specific person based on the slug\nasync function fetchPersonData(slug: string) {\n  const person = await client.fetch<SanityDocument>(PERSON_QUERY, { slug });\n  console.log('person', person);\n  return person;\n}\n\nconst CustomPortableText = ({ value }: { value: any }) => {\n  return (\n    <PortableText\n      value={value}\n      components={{\n        block: {\n          // Custom rendering for \"normal\" blocks\n          normal: ({ children }) => (\n            <p className=\"text-sm text-gray-800 my-2\">{children}</p>\n          ),\n        },\n        marks: {\n          // Custom rendering for \"strong\" (bold) text\n          strong: ({ children }) => (\n            <strong className=\"font-bold\">{children}</strong>\n          ),\n          // Custom rendering for \"em\" (italic) text\n          em: ({ children }) => (\n            <em className=\"italic text-gray-600\">{children}</em>\n          ),\n        },\n        listItem: ({ children }) => (\n          <li className=\"text-xs text-gray-600 py-1\">{children}</li>\n        ),\n      }}\n    />\n  );\n};\n\n// ImageGallery component for rendering image galleries\n// const ImageGallery = ({ images, caption }: { images: { url: string; alt?: string }[]; caption?: string }) => (\n//   <div className=\"mt-8\">\n//     <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3\">\n//       {images.map((image, index) => (\n//           <div key={index} className=\"relative h-64\">\n//           <Image\n//             src={urlForImage(image).quality(100).url()}\n//             alt={image.alt || 'Gallery Image'}\n//             width={100}\n//             height={100}\n//             className=''\n//           />\n//         </div>\n//         ))}\n//     </div>\n//     {caption && <p className=\"mt-4 text-center italic\">{caption}</p>}\n//   </div>\n// );\n\n\n\n// The dynamic page component\nexport default async function Page({ params }) {\n  const { slug } = await params;\n\n  // Fetch the person data\n  const person = await fetchPersonData(slug);\n\n  // Handle the case where no data is found\n  if (!person) {\n    return <div>404 - Person Not Found</div>;\n  }\n\n  return (\n    <div className=\"max-w-7xl max-auto justify-items-center mt-16\">\n      <div className=\"max-w-3xl\">\n        <h3 className=\"text-2xl mx-10 normal text-gray-700\">\n          An Experienced and Dedicated Team at Your Service\n        </h3>\n        <div className=\"h-[3px] w-[120px] bg-red-500 rounded mx-auto mt-4\"></div>\n      </div>\n     {/* Grid Section */}\n<div className=\"mt-8 max-auto items-center justify-items-center\">\n  <div className=\"grid grid-cols-4 gap-4 max-w-3xl mx-auto px-14\">\n    {/* Left Column */}\n    <div className=\"mx-auto text-center col-span-1\">\n      <div>\n        <Image\n          src={urlForImage(person.image).quality(100).url()}\n          alt={person.name}\n          width={100}\n          height={100}\n          className=\"rounded-full w-full\"\n        />\n      </div>\n      <div>\n        <h1 className=\"text-2xl mt-2\">{person.name}</h1>\n        <p className=\"text-[13px] text-gray-500 italic mt-2\">{person.title}</p>\n        <p className=\"text-[13px] leading-4 text-gray-500 mt-1\">{person.subtitle}</p>\n\n        <div className=\"flex items-center justify-center my-2\">\n          <div className=\"flex-grow border-t border-gray-400\"></div>\n          <span className=\"mx-2\">\n            <Image\n              alt=\"linkedin in\"\n              src=\"/assets/in.png\"\n              width={12}\n              height={12}\n              className=\"pb-2\"\n            />\n          </span>\n          <div className=\"flex-grow border-t border-gray-400\"></div>\n        </div>\n        <span className=\"border-b-2 border-gray-300 mt-4\"></span>\n      </div>\n    </div>\n\n    {/* Right Column */}\n    <div className=\"col-span-3 max-w-full\">\n      {/* Render description using PortableText */}\n      <div className=\"mt-2\">\n        {person.description?.map((block, index) => (\n          <CustomPortableText key={block._key || index} value={[block]} />\n        ))}\n      </div>\n\n      {/* Render content blocks */}\n      {/* <div>\n        {person.content?.map((block, index) => {\n          if (block.images) {\n            return (\n              <ImageGallery\n                key={index}\n                images={block.images || []}\n                caption={block.caption}\n              />\n            );\n          }\n          return null; // Skip other blocks\n        })}\n      </div> */}\n    </div>\n  </div>\n</div>\n</div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAFA;;;;;AAKA,MAAM,eAAe,CAAC;;;;;;;;;;;;;CAarB,CAAC;AAEF,MAAM,cAAc,CAAC;;;CAGpB,CAAC;AAGK,eAAe;IACpB,MAAM,QAAQ,MAAM,8HAAA,CAAA,SAAM,CAAC,KAAK,CAAqB;IAErD,qDAAqD;IACrD,OAAO,MAAM,GAAG,CAAC,CAAC,OAAS,CAAC;YAC1B,MAAM,KAAK,IAAI;QACjB,CAAC;AACH;AAEA,2DAA2D;AAC3D,eAAe,gBAAgB,IAAY;IACzC,MAAM,SAAS,MAAM,8HAAA,CAAA,SAAM,CAAC,KAAK,CAAiB,cAAc;QAAE;IAAK;IACvE,QAAQ,GAAG,CAAC,UAAU;IACtB,OAAO;AACT;AAEA,MAAM,qBAAqB,CAAC,EAAE,KAAK,EAAkB;IACnD,qBACE,8OAAC,wKAAA,CAAA,eAAY;QACX,OAAO;QACP,YAAY;YACV,OAAO;gBACL,uCAAuC;gBACvC,QAAQ,CAAC,EAAE,QAAQ,EAAE,iBACnB,8OAAC;wBAAE,WAAU;kCAA8B;;;;;;YAE/C;YACA,OAAO;gBACL,4CAA4C;gBAC5C,QAAQ,CAAC,EAAE,QAAQ,EAAE,iBACnB,8OAAC;wBAAO,WAAU;kCAAa;;;;;;gBAEjC,0CAA0C;gBAC1C,IAAI,CAAC,EAAE,QAAQ,EAAE,iBACf,8OAAC;wBAAG,WAAU;kCAAwB;;;;;;YAE1C;YACA,UAAU,CAAC,EAAE,QAAQ,EAAE,iBACrB,8OAAC;oBAAG,WAAU;8BAA8B;;;;;;QAEhD;;;;;;AAGN;AAyBe,eAAe,KAAK,EAAE,MAAM,EAAE;IAC3C,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM;IAEvB,wBAAwB;IACxB,MAAM,SAAS,MAAM,gBAAgB;IAErC,yCAAyC;IACzC,IAAI,CAAC,QAAQ;QACX,qBAAO,8OAAC;sBAAI;;;;;;IACd;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAsC;;;;;;kCAGpD,8OAAC;wBAAI,WAAU;;;;;;;;;;;;0BAGvB,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;;sCAEb,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;8CACC,cAAA,8OAAC,6HAAA,CAAA,UAAK;wCACJ,KAAK,CAAA,GAAA,8HAAA,CAAA,cAAW,AAAD,EAAE,OAAO,KAAK,EAAE,OAAO,CAAC,KAAK,GAAG;wCAC/C,KAAK,OAAO,IAAI;wCAChB,OAAO;wCACP,QAAQ;wCACR,WAAU;;;;;;;;;;;8CAGd,8OAAC;;sDACC,8OAAC;4CAAG,WAAU;sDAAiB,OAAO,IAAI;;;;;;sDAC1C,8OAAC;4CAAE,WAAU;sDAAyC,OAAO,KAAK;;;;;;sDAClE,8OAAC;4CAAE,WAAU;sDAA4C,OAAO,QAAQ;;;;;;sDAExE,8OAAC;4CAAI,WAAU;;8DACb,8OAAC;oDAAI,WAAU;;;;;;8DACf,8OAAC;oDAAK,WAAU;8DACd,cAAA,8OAAC,6HAAA,CAAA,UAAK;wDACJ,KAAI;wDACJ,KAAI;wDACJ,OAAO;wDACP,QAAQ;wDACR,WAAU;;;;;;;;;;;8DAGd,8OAAC;oDAAI,WAAU;;;;;;;;;;;;sDAEjB,8OAAC;4CAAK,WAAU;;;;;;;;;;;;;;;;;;sCAKpB,8OAAC;4BAAI,WAAU;sCAEb,cAAA,8OAAC;gCAAI,WAAU;0CACZ,OAAO,WAAW,EAAE,IAAI,CAAC,OAAO,sBAC/B,8OAAC;wCAA6C,OAAO;4CAAC;yCAAM;uCAAnC,MAAM,IAAI,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBjD"}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/.next-internal/server/app/team/[slug]/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 331, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}